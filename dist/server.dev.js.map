{"version":3,"sources":["server.js"],"names":["require","config","express","mongoose","User","app","connect","useNewUrlParser","then","console","log","err","error","get","req","res","send","find","users","json","post","body","name","email","password","user","save","put","id","params","findByIdAndUpdate","findByIdAndDelete","message","PORT","process","env","listen"],"mappings":"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","sourcesContent":["const { config } = require('dotenv');\r\nconst express =require(\"express\")\r\nconst mongoose = require('mongoose');\r\nconst User = require('./models/User');\r\n\r\n\r\nconst app = express();\r\nmongoose.connect('mongodb://localhost:3000/userdb', { useNewUrlParser: true })\r\n  .then(() => console.log('Connected to MongoDB'))\r\n  .catch(err => console.error('Could not connect to MongoDB', err));\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('Hello World!');\r\n});\r\n\r\napp.get('/users', async (req, res) => {\r\n    const users = await User.find();\r\n    res.json(users);\r\n});\r\n\r\n// GET all users\r\napp.get('/users', async (req, res) => {\r\n    const users = await User.find();\r\n    res.json(users);\r\n  });\r\n  \r\n  // POST add new user\r\n  app.post('/users', async (req, res) => {\r\n    const { name, email, password } = req.body;\r\n    const user = new User({ name, email, password });\r\n    await user.save();\r\n    res.json(user);\r\n  });\r\n  \r\n  // PUT edit user by ID\r\n  app.put('/users/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    const { name, email, password } = req.body;\r\n    const user = await User.findByIdAndUpdate(id, { name, email, password }, { new: true });\r\n    res.json(user);\r\n  });\r\n  \r\n  // DELETE remove user by ID\r\n  app.delete('/users/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    await User.findByIdAndDelete(id);\r\n    res.json({ message: 'User deleted' });\r\n  });\r\n  \r\n  const PORT = process.env.PORT || 3000;\r\n \r\n \r\n  \r\n  \r\n  \r\n\r\n\r\napp.listen(PORT, function () {\r\n  console.log(`Server started on port ${PORT}`);\r\n});"],"file":"server.dev.js"}